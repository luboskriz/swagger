{
    "x-generator": "NSwag v13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v12.0.0.0))",
    "openapi": "3.0.0",
    "info": {
      "title": "NCR Aloha POS API",
      "description": "This API is designed for both internal and external integrations with [NCR Aloha POS](https://www.ncr.com/restaurants/aloha-pos).<br/><br/>API service build version: `20.1.0.612`",
      "version": "20.1.0"
    },
    "servers": [
      {
        "url": "http://127.0.0.1:4010"
      }
    ],
    "paths": {
      "/aloha-ui/employee-log-in": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/login endpoint",
          "operationId": "AlohaUI_EmployeeLogIn",
          "requestBody": {
            "x-name": "loginRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogInResponseData"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/api/aloha-ui/employee-log-in": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/login endpoint",
          "operationId": "AlohaUI_EmployeeLogIn2",
          "requestBody": {
            "x-name": "loginRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogInResponseData"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/aloha-ui/employee-log-out": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/current/logout endpoint",
          "operationId": "AlohaUI_EmployeeLogOut",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/api/aloha-ui/employee-log-out": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/current/logout endpoint",
          "operationId": "AlohaUI_EmployeeLogOut2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/aloha-ui/heartbeat": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/current/renew-login endpoint",
          "operationId": "AlohaUI_HeartBeat",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/api/aloha-ui/heartbeat": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/current/renew-login endpoint",
          "operationId": "AlohaUI_HeartBeat2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/aloha-ui/tables": {
        "get": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_GetTables",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetTablesResponseData"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/api/aloha-ui/tables": {
        "get": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_GetTables2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetTablesResponseData"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/aloha-ui/check-presenter/login": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/switch-to-check-presenter endpoint",
          "operationId": "AlohaUI_BeginCheckPresenter",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "requestData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPresenterRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckPresenterResponseData"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/api/aloha-ui/check-presenter/login": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/switch-to-check-presenter endpoint",
          "operationId": "AlohaUI_BeginCheckPresenter2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "requestData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPresenterRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckPresenterResponseData"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/aloha-ui/check-presenter/logout": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/logout-check-presenter endpoint",
          "operationId": "AlohaUI_EndCheckPresenter",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "requestData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndCheckPresenterData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/api/aloha-ui/check-presenter/logout": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "description": "Aloha-ui is obsolete, please use /api/employees/logout-check-presenter endpoint",
          "operationId": "AlohaUI_EndCheckPresenter2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "requestData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndCheckPresenterData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true
        }
      },
      "/aloha-ui/payments": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_CreatePayment",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "paymentRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NcpPaymentRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentResponseData"
                  }
                }
              }
            }
          }
        }
      },
      "/api/aloha-ui/payments": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_CreatePayment2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "paymentRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NcpPaymentRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentResponseData"
                  }
                }
              }
            }
          }
        }
      },
      "/aloha-ui/payments/{id}/authorization": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_AuthorizePayment",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "paymentAuthorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NcpPaymentAuthorizationRequestData"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "/api/aloha-ui/payments/{id}/authorization": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_AuthorizePayment2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "paymentAuthorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NcpPaymentAuthorizationRequestData"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "/aloha-ui/receipts/print": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_PrintReceipt",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "printRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintReceiptRequest"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "/api/aloha-ui/receipts/print": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_PrintReceipt2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "printRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintReceiptRequest"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "/aloha-ui/receipts/sms": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_SendSmsReceipt",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "smsSendRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsReceiptRequest"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "/api/aloha-ui/receipts/sms": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_SendSmsReceipt2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "smsSendRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsReceiptRequest"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "/aloha-ui/receipts/email": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_SendEmailReceipt",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "emailReceiptRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailReceiptRequest"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "/api/aloha-ui/receipts/email": {
        "post": {
          "tags": [
            "AlohaUI"
          ],
          "operationId": "AlohaUI_SendEmailReceipt2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "emailReceiptRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailReceiptRequest"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        }
      },
      "/checks": {
        "get": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_GetAllChecks",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "id",
              "in": "query",
              "schema": {
                "type": "integer",
                "nullable": true
              },
              "x-position": 2
            },
            {
              "name": "isClosed",
              "in": "query",
              "schema": {
                "type": "boolean",
                "nullable": true
              },
              "x-position": 3
            },
            {
              "name": "tableId",
              "in": "query",
              "schema": {
                "type": "integer",
                "nullable": true
              },
              "x-position": 4
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CheckViewData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        },
        "post": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_CreateCheck",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckCreateData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/checks/{check-id}": {
        "get": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_GetCheckById",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "check-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/checks/{check-id}/close": {
        "post": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_CloseCheck",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "check-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/checks/{check-id}/check-items": {
        "get": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_GetAllItemsFromCheckById",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "check-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CheckItemViewData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        },
        "post": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_CreateItemOnCheck",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "check-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "check",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckItemCreateData"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        },
        "delete": {
          "tags": [
            "Check"
          ],
          "description": "Operation may require **JIT Manager Approval**.",
          "operationId": "Check_DeleteItemsFromCheck",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "check-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/checks/print": {
        "post": {
          "tags": [
            "Check"
          ],
          "summary": "Print multiple checks on default or a specified printer.",
          "operationId": "Check_PrintChecks",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "printRequest",
            "description": "Print request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintChecksRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/checks/{check-id}/payments": {
        "post": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_CreatePayment",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "check-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "paymentRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentRequestData"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/checks/{check-id}/payments/{payment-id}/authorize": {
        "post": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_AuthorizePayment",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "check-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            },
            {
              "name": "payment-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 3
            }
          ],
          "requestBody": {
            "x-name": "paymentRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAuthorizationRequestData"
                }
              }
            },
            "required": true,
            "x-position": 4
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/checks/{check-id}/get-tender-default-amount/{tender-id}": {
        "get": {
          "tags": [
            "Check"
          ],
          "operationId": "Check_GetTenderDefaultAmount",
          "parameters": [
            {
              "name": "check-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 1
            },
            {
              "name": "tender-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TenderDefaultAmountData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/devices/{deviceId}": {
        "get": {
          "tags": [
            "Device"
          ],
          "operationId": "Device_Get",
          "parameters": [
            {
              "name": "deviceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeviceData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/api/devices/{deviceId}": {
        "get": {
          "tags": [
            "Device"
          ],
          "operationId": "Device_Get2",
          "parameters": [
            {
              "name": "deviceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeviceData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/devices/log-entries/{deviceId}": {
        "post": {
          "tags": [
            "Device"
          ],
          "operationId": "Device_LogEntry",
          "parameters": [
            {
              "name": "deviceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/api/devices/log-entries/{deviceId}": {
        "post": {
          "tags": [
            "Device"
          ],
          "operationId": "Device_LogEntry2",
          "parameters": [
            {
              "name": "deviceId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/login": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Log in employee using their CFC employee ID and password.",
          "operationId": "Employee_LogIn",
          "requestBody": {
            "x-name": "loginRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogInResponseData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/logout": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Log out currently logged in employee.",
          "operationId": "Employee_LogOut",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/renew-login": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Renew currently logged in employee login session to keep it from expiring and logging out the employee automatically.",
          "operationId": "Employee_RenewLogin",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/switch-to-check-presenter": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Change current log in session to a restricted payments session for pay at table scenarios.\nLogs out the employee and returns a new session token for the restricted session.",
          "operationId": "Employee_SwitchToCheckPresenter",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "requestData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPresenterRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CheckPresenterResponseData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/logout-check-presenter": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Log out current restricted pay at table session.",
          "operationId": "Employee_LogoutCheckPresenter",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "requestData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndCheckPresenterData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/clock-in": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Clock in currently logged in employee, starting a new shift for them.",
          "description": "Operation may require **JIT Manager Approval**.",
          "operationId": "Employee_ClockIn",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "requestData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClockInRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/clock-out": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Clock out currently logged in employee, closing their current shift.",
          "description": "Operation may require **JIT Manager Approval**.",
          "operationId": "Employee_ClockOut",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "clockOutRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClockOutRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/{employeeId}/clock-out": {
        "delete": {
          "tags": [
            "Employee"
          ],
          "summary": "Delete the last clock out of another employee which reopens their last shift.\nManager operation, may require manager job code configuration.",
          "description": "Operation may require **JIT Manager Approval**.",
          "operationId": "Employee_DeleteClockOut",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "employeeId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "x-position": 3
            }
          ],
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/break-in": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Begin a break in currently logged in employee's current shift.",
          "description": "Operation may require **JIT Manager Approval**.",
          "operationId": "Employee_BreakIn",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "breakInRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreakInRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/break-out": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "End current break for the currently logged in employee.",
          "description": "Operation may require **JIT Manager Approval**.",
          "operationId": "Employee_BreakOut",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "breakOutRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BreakOutRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/pending-messages": {
        "get": {
          "tags": [
            "Employee"
          ],
          "summary": "Read a list of pending messages that need to be acknowledged by currently logged in employee before they can clock in.",
          "operationId": "Employee_GetPendingClockInMessages",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ClockInMessageData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/pending-messages/acknowledge": {
        "post": {
          "tags": [
            "Employee"
          ],
          "summary": "Acknowledge identified pending messages for currently logged in employee.",
          "operationId": "Employee_AcknowledgeClockInMessages",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "acknowledgeRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcknowledgeClockInRequestData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/employees/current/configuration": {
        "get": {
          "tags": [
            "Employee"
          ],
          "summary": "Get configuration for the current logged in employee.",
          "operationId": "Employee_GetConfiguration",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConfigurationData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/menus/current": {
        "get": {
          "tags": [
            "Menu"
          ],
          "summary": "Current menu for logged in employee.\nCache using ETag and Cache-Control response headers.",
          "operationId": "Menu_GetCurrentMenu",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "description": "Session token of current employee",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "If-None-Match",
              "in": "header",
              "description": "ETag value",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "Menu",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuData"
                  }
                }
              }
            },
            "304": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/api/menus/current": {
        "get": {
          "tags": [
            "Menu"
          ],
          "summary": "Current menu for logged in employee.\nCache using ETag and Cache-Control response headers.",
          "operationId": "Menu_GetCurrentMenu2",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "description": "Session token of current employee",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "If-None-Match",
              "in": "header",
              "description": "ETag value",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "Menu",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MenuData"
                  }
                }
              }
            },
            "304": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/menus/sales-items/{id}": {
        "get": {
          "tags": [
            "Menu"
          ],
          "summary": "Sales item by Id",
          "operationId": "Menu_GetSalesItemById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Id of sales item",
              "schema": {
                "type": "integer"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SalesItemData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/api/menus/sales-items/{id}": {
        "get": {
          "tags": [
            "Menu"
          ],
          "summary": "Sales item by Id",
          "operationId": "Menu_GetSalesItemById2",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Id of sales item",
              "schema": {
                "type": "integer"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SalesItemData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/menus/sales-items": {
        "get": {
          "tags": [
            "Menu"
          ],
          "summary": "All available sales items.\nCache using ETag and Cache-Control response headers.",
          "operationId": "Menu_GetAllSalesItemsAll",
          "parameters": [
            {
              "name": "If-None-Match",
              "in": "header",
              "description": "ETag value",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Sales items collection",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesItemData"
                    }
                  }
                }
              }
            },
            "304": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/api/menus/sales-items": {
        "get": {
          "tags": [
            "Menu"
          ],
          "summary": "All available sales items.\nCache using ETag and Cache-Control response headers.",
          "operationId": "Menu_GetAllSalesItems",
          "parameters": [
            {
              "name": "If-None-Match",
              "in": "header",
              "description": "ETag value",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Sales items collection",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SalesItemData"
                    }
                  }
                }
              }
            },
            "304": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/menus/modifier-groups": {
        "get": {
          "tags": [
            "Menu"
          ],
          "summary": "All available modifier groups.\nCache using ETag and Cache-Control response headers.",
          "operationId": "Menu_GetAllModifierGroupsAll",
          "parameters": [
            {
              "name": "If-None-Match",
              "in": "header",
              "description": "ETag value",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Modifier groups collection",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ModifierGroupData"
                    }
                  }
                }
              }
            },
            "304": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/api/menus/modifier-groups": {
        "get": {
          "tags": [
            "Menu"
          ],
          "summary": "All available modifier groups.\nCache using ETag and Cache-Control response headers.",
          "operationId": "Menu_GetAllModifierGroups",
          "parameters": [
            {
              "name": "If-None-Match",
              "in": "header",
              "description": "ETag value",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Modifier groups collection",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ModifierGroupData"
                    }
                  }
                }
              }
            },
            "304": {
              "description": ""
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/order-modes": {
        "get": {
          "tags": [
            "OrderMode"
          ],
          "operationId": "OrderMode_GetAllOrderModes",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/OrderModeViewData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/tables": {
        "get": {
          "tags": [
            "Table"
          ],
          "summary": "Read tables. Supports filtering results using query parameters.",
          "operationId": "Table_GetTables",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "id",
              "in": "query",
              "schema": {
                "type": "integer",
                "nullable": true
              },
              "x-position": 2
            },
            {
              "name": "name",
              "in": "query",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 3
            },
            {
              "name": "owningEmployeeId",
              "in": "query",
              "schema": {
                "type": "integer",
                "nullable": true
              },
              "x-position": 4
            },
            {
              "name": "isClosed",
              "in": "query",
              "schema": {
                "type": "boolean",
                "nullable": true
              },
              "x-position": 5
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TableViewData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        },
        "post": {
          "tags": [
            "Table"
          ],
          "summary": "Create a table using provided parameters.",
          "operationId": "Table_CreateTable",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "tableCreationData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableCreateData"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TableViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/tables/{table-id}": {
        "get": {
          "tags": [
            "Table"
          ],
          "summary": "Read a table by ID.",
          "operationId": "Table_GetTableById",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "table-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TableViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/tables/{table-id}/rename": {
        "post": {
          "tags": [
            "Table"
          ],
          "summary": "Rename a table belonging to currently logged in employee. Can only rename open tables.",
          "operationId": "Table_RenameTable",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "table-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "tableRenameData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableRenameData"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TableViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/tables/{table-id}/lock": {
        "post": {
          "tags": [
            "Table"
          ],
          "summary": "Lock a table belonging to currently logged in employee.",
          "operationId": "Table_LockTable",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "table-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TableViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/tables/{table-id}/unlock": {
        "post": {
          "tags": [
            "Table"
          ],
          "summary": "Unlock a table belonging to currently logged in employee.",
          "operationId": "Table_UnlockTable",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "table-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TableViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/tables/{table-id}/order-items": {
        "post": {
          "tags": [
            "Table"
          ],
          "summary": "Order items on the table.",
          "operationId": "Table_OrderItemsOnTable",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "table-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableOrderData"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TableViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/tables/{table-id}/add-seat": {
        "post": {
          "tags": [
            "Table"
          ],
          "summary": "Adds seat to the table.",
          "operationId": "Table_AddSeat",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "table-id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TableViewData"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/table-definitions": {
        "get": {
          "tags": [
            "TableDefinition"
          ],
          "summary": "Read all configured table definitions.",
          "operationId": "TableDefinition_GetAllTableDefinitions",
          "parameters": [
            {
              "name": "Employee-Session-Token",
              "in": "header",
              "required": true,
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TableDefinitionViewData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/tenders": {
        "get": {
          "tags": [
            "Tender"
          ],
          "operationId": "Tender_GetAllTenders",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TenderDefinitionData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      },
      "/void-refund-reasons": {
        "get": {
          "tags": [
            "VoidRefundReason"
          ],
          "operationId": "VoidRefundReason_GetAllReasons",
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/VoidReasonCodeViewData"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseData"
                  }
                }
              }
            },
            "500": {
              "description": ""
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "LogInResponseData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "employeeId": {
              "type": "integer",
              "description": "ID of the logged in employee."
            },
            "sessionToken": {
              "type": "string",
              "description": "Token identifying the log in session for the newly logged in employee.\nProvide this token in Employee-Session-Token header to authorize POS operations."
            },
            "employeeFirstName": {
              "type": "string",
              "description": "First name of the logged in employee."
            },
            "employeeLastName": {
              "type": "string",
              "description": "Last name of the logged in employee."
            },
            "roles": {
              "type": "array",
              "description": "Collection of roles this employee can clock in as.",
              "items": {
                "$ref": "#/components/schemas/RoleData"
              }
            },
            "shiftState": {
              "description": "Information about the logged in employee's clock in/break in status.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EmployeeShiftState"
                }
              ]
            }
          }
        },
        "RoleData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "roleId": {
              "type": "integer",
              "description": "ID of the role."
            },
            "name": {
              "type": "string",
              "description": "Full name of the role.",
              "nullable": true
            },
            "shortName": {
              "type": "string",
              "description": "Short version of the role name.",
              "nullable": true
            }
          }
        },
        "EmployeeShiftState": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "CLOCKED_OUT",
            "CLOCKED_IN",
            "ON_BREAK"
          ],
          "enum": [
            "CLOCKED_OUT",
            "CLOCKED_IN",
            "ON_BREAK"
          ]
        },
        "EmployeeCredentialsData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "employeeId",
            "password"
          ],
          "properties": {
            "employeeId": {
              "type": "integer",
              "description": "Id of the employee"
            },
            "password": {
              "type": "string",
              "description": "Employee's password",
              "minLength": 1
            }
          }
        },
        "GetTablesResponseData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "tables": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/TableData"
              }
            }
          }
        },
        "TableData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "nullable": true
            },
            "tableDefinitionId": {
              "type": "integer",
              "nullable": true
            },
            "name": {
              "type": "string",
              "nullable": true
            },
            "guestCount": {
              "type": "integer",
              "nullable": true
            },
            "seatCount": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "number": {
              "type": "integer",
              "nullable": true
            },
            "isNamed": {
              "type": "boolean",
              "nullable": true
            },
            "isLocked": {
              "type": "boolean",
              "nullable": true
            },
            "owningEmployeeId": {
              "type": "integer",
              "nullable": true
            },
            "checks": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/CheckData"
              }
            },
            "type": {
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TableType"
                }
              ]
            }
          }
        },
        "CheckData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "nullable": true
            },
            "number": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "isClosed": {
              "type": "boolean",
              "nullable": true
            },
            "subtotal": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "total": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "tax": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "gratuityPercent": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "gratuityTotal": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "gratuityTax": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "image": {
              "type": "string",
              "format": "byte",
              "nullable": true
            },
            "balance": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "isTaxExempt": {
              "type": "boolean",
              "nullable": true
            },
            "taxExemptNumber": {
              "type": "string",
              "nullable": true
            },
            "entries": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/EntryData"
              }
            },
            "payments": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/PaymentData"
              }
            },
            "comps": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/CompData"
              }
            },
            "promos": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/PromoData"
              }
            }
          }
        },
        "EntryData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "nullable": true
            },
            "quantity": {
              "type": "integer",
              "nullable": true
            },
            "level": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "seat": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "weight": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "units": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "isSentToKitchen": {
              "type": "boolean",
              "nullable": true
            },
            "isHeld": {
              "type": "boolean",
              "nullable": true
            },
            "orderModeId": {
              "type": "integer",
              "nullable": true
            },
            "autoSendOrderModeId": {
              "type": "integer",
              "nullable": true,
              "description": "ID of future Order Mode for held Item (entryDto, auto_send_order_mode_id).",
              "example": 4
            },
            "autoSendTime": {
              "type": "integer",
              "nullable": true,
              "description": "Time (in number of minutes) when held Item should be released (entryDto, auto_send_time).",
              "example": 20
            },
            "courseNumber": {
              "type": "integer",
              "nullable": true
            },
            "totalModifierPrices": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "modifierCodeId": {
              "type": "integer",
              "nullable": true
            },
            "modifierCodeDisplayName": {
              "type": "string",
              "nullable": true
            },
            "modifierCodeIndicator": {
              "type": "string",
              "nullable": true
            },
            "modifierGroupId": {
              "type": "integer",
              "nullable": true
            },
            "isRefill": {
              "type": "boolean",
              "nullable": true
            },
            "displayName": {
              "type": "string",
              "nullable": true
            },
            "itemId": {
              "type": "integer",
              "nullable": true
            },
            "specialMessageString": {
              "type": "string",
              "nullable": true
            },
            "isVoid": {
              "type": "boolean",
              "nullable": true
            },
            "menuId": {
              "type": "integer",
              "nullable": true
            },
            "submenuId": {
              "type": "integer",
              "nullable": true
            },
            "price": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "children": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/EntryData"
              }
            },
            "includedModifiers": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/IncludedModifierData"
              }
            }
          }
        },
        "IncludedModifierData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "nullable": true
            },
            "level": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "shortName": {
              "type": "string",
              "nullable": true
            },
            "price": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "includedModifiers": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/IncludedModifierData"
              }
            }
          }
        },
        "PaymentData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of the payment",
              "nullable": true
            },
            "maskedCardNumber": {
              "type": "string",
              "description": "Masked card number.",
              "nullable": true
            },
            "authorizationString": {
              "type": "string",
              "description": "Authorization string.",
              "nullable": true
            },
            "amount": {
              "type": "number",
              "description": "Amount.",
              "format": "double",
              "nullable": true
            },
            "tip": {
              "type": "number",
              "description": "Tip.",
              "format": "double",
              "nullable": true
            },
            "effectiveTenderId": {
              "type": "integer",
              "description": "Represents the target \"report as\" tender type id for a Payment.tender.",
              "nullable": true
            },
            "authorizationStatus": {
              "type": "string",
              "description": "Authorization status.",
              "nullable": true
            },
            "referenceId": {
              "type": "string",
              "description": "Transaction reference of the payment operation.",
              "nullable": true
            },
            "changeAmount": {
              "type": "string",
              "description": "The amount of change that should be returned to the guest due to this payment.",
              "nullable": true
            }
          }
        },
        "CompData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "nullable": true
            },
            "amount": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "unit": {
              "type": "string",
              "nullable": true
            },
            "guestName": {
              "type": "string",
              "nullable": true
            },
            "effectiveName": {
              "type": "string",
              "nullable": true
            },
            "name": {
              "type": "string",
              "nullable": true
            },
            "checkName": {
              "type": "string",
              "nullable": true
            },
            "discountedEntryIds": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer"
              }
            },
            "selectedEntryIds": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "PromoData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "nullable": true
            },
            "amount": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "price": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "displayPrice": {
              "type": "string",
              "nullable": true
            },
            "identifier": {
              "type": "string",
              "nullable": true
            },
            "name": {
              "type": "string",
              "nullable": true
            },
            "discountedEntryIds": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer"
              }
            },
            "selectedEntryIds": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "TableType": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "UNDEFINED",
            "TAB",
            "SEAT",
            "TABLE",
            "CHECK",
            "ORDER",
            "REOPENED_CHECK",
            "TEMPORARY",
            "TRANSFER_SEAT",
            "TRANSFER_CHECK"
          ],
          "enum": [
            "UNDEFINED",
            "TAB",
            "SEAT",
            "TABLE",
            "CHECK",
            "ORDER",
            "REOPENED_CHECK",
            "TEMPORARY",
            "TRANSFER_SEAT",
            "TRANSFER_CHECK"
          ]
        },
        "CheckPresenterResponseData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "sessionToken": {
              "type": "string"
            },
            "checksToBePaid": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CheckData"
              }
            }
          }
        },
        "CheckPresenterRequestData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "tableId",
            "checkIdsToBePaid"
          ],
          "properties": {
            "tableId": {
              "type": "integer"
            },
            "checkIdsToBePaid": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "EndCheckPresenterData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "tableId": {
              "type": "integer"
            }
          }
        },
        "PaymentResponseData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "paymentId": {
              "type": "integer"
            },
            "checkData": {
              "$ref": "#/components/schemas/CheckViewData"
            }
          }
        },
        "CheckViewData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of the message",
              "nullable": true
            },
            "number": {
              "type": "integer",
              "description": "Number of check on a table (0..31)",
              "format": "int32",
              "nullable": true
            },
            "isClosed": {
              "type": "boolean",
              "description": "Flag if the check is closed.",
              "nullable": true
            },
            "subtotal": {
              "type": "number",
              "description": "Subtotal line when check closed. Subtotal = Total - Tax - GratuityTotal",
              "format": "double",
              "nullable": true
            },
            "total": {
              "type": "number",
              "description": "Total of a check. This is a total of all items, taxes, discounts, surcharges, gratuities. This is the total amount that needs to be paid to fully tender the check. Total = Subtotal + Gratuity_total + Tax",
              "format": "double",
              "nullable": true
            },
            "tax": {
              "type": "number",
              "description": "Total exclusive tax on check. It includes also GratuityTax. Tax = Total - Subtotal - GratuityTotal",
              "format": "double",
              "nullable": true
            },
            "gratuityPercent": {
              "type": "number",
              "description": "Gratuity percent",
              "format": "double",
              "nullable": true
            },
            "gratuityTotal": {
              "type": "number",
              "description": "Total amount of gratuities (including wage gratuities, which are excluded from tips). Table Service only.\nWage gratuities are not regarded as tips to the employee and report similar to a service charge collected by the restaurant.\n    The assumption is the store will add this gratuity to the wages earned by the employee on their paycheck for declaration.",
              "format": "double",
              "nullable": true
            },
            "gratuityTax": {
              "type": "number",
              "description": "Amount of exclusive tax on check due to gratuity",
              "format": "double",
              "nullable": true
            },
            "image": {
              "type": "string",
              "format": "byte",
              "nullable": true
            },
            "balance": {
              "type": "number",
              "description": "Total remaining balance of a check.",
              "format": "double",
              "nullable": true
            },
            "isTaxExempt": {
              "type": "boolean",
              "description": "True if check is exempt. Otherwise false.",
              "nullable": true
            },
            "taxExemptNumber": {
              "type": "string",
              "description": "Number of tax exempt.",
              "nullable": true
            },
            "items": {
              "type": "array",
              "description": "List of check's items",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/CheckItemViewData"
              }
            },
            "payments": {
              "type": "array",
              "description": "List of check's payments",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/PaymentData"
              }
            }
          }
        },
        "CheckItemViewData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of the check item",
              "nullable": true
            },
            "salesItemId": {
              "type": "integer",
              "description": "Id of the sales item.",
              "nullable": true
            },
            "quantity": {
              "type": "integer",
              "description": "It is always 1 for item pricing because consolidation is not currently supported by this API. For quantity pricing, please use \"units\".",
              "nullable": true
            },
            "level": {
              "type": "integer",
              "description": "Level of item = depth in check's tree items list: 0 = item, 1 = modifier, 2 = modifier of a modifier etc.",
              "format": "int32",
              "nullable": true
            },
            "weight": {
              "type": "number",
              "description": "Weight from international scan.",
              "format": "double",
              "nullable": true
            },
            "units": {
              "type": "number",
              "description": "Number of units for this item if it uses unit quantity pricing, otherwise this field is always 1.0.",
              "format": "double",
              "nullable": true
            },
            "displayName": {
              "type": "string",
              "description": "Display name",
              "nullable": true
            },
            "isVoid": {
              "type": "boolean",
              "description": "True if the item is void. Otherwise false.",
              "nullable": true
            },
            "menuId": {
              "type": "integer",
              "description": "Menu from which the item was ordered.",
              "nullable": true
            },
            "submenuId": {
              "type": "integer",
              "description": "TS only, top-level entries only: SubMenu from which the item was rung.",
              "nullable": true
            },
            "modifiers": {
              "type": "array",
              "description": "Modifiers applied to this item. Includes sales item modifiers,\nautomatically included modifiers, and special messages.",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ModifierViewData"
              }
            },
            "seatNumber": {
              "type": "integer",
              "description": "Number of the seat this item is on.",
              "format": "int32",
              "nullable": true
            },
            "isSentToKitchen": {
              "type": "boolean",
              "description": "True if item has been sent to kitchen. Otherwise false.",
              "nullable": true
            }
          }
        },
        "ModifierViewData": {
          "type": "object",
          "description": "Modifier applied to the check item. Can contain more modifiers as children.\nCan represent a sales item modifier, automatically included modifier,\nor a special message.",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Modifier entry ID. Only filled in for sales item modifiers.",
              "nullable": true
            },
            "displayName": {
              "type": "string",
              "description": "Display name",
              "nullable": true
            },
            "isIncludedModifier": {
              "type": "boolean",
              "description": "Is included modifier"
            },
            "modifierSalesItemId": {
              "type": "integer",
              "description": "ID of the item applied by this modifier.",
              "nullable": true
            },
            "modifierGroupId": {
              "type": "integer",
              "description": "ID of the modifier group this modifier is in.",
              "nullable": true
            },
            "modifierCodeId": {
              "type": "integer",
              "description": "Id of modifier code applied to this modifier.",
              "nullable": true
            },
            "specialMessage": {
              "type": "string",
              "description": "Special message to be shown as a modifier.",
              "nullable": true
            },
            "isRefill": {
              "type": "boolean",
              "description": "Is refill modifier",
              "nullable": true
            },
            "refillCount": {
              "type": "integer",
              "description": "Number of refills used to modify the check item.",
              "nullable": true
            },
            "modifiers": {
              "type": "array",
              "description": "Modifiers applied to this item. Includes sales item modifiers,\nautomatically included modifiers, and special messages.",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ModifierViewData"
              }
            }
          }
        },
        "ModifierCodeViewData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "nullable": true
            },
            "displayName": {
              "type": "string",
              "nullable": true
            },
            "indicator": {
              "type": "string",
              "nullable": true
            }
          }
        },
        "NcpPaymentRequestData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "checkId"
          ],
          "properties": {
            "checkId": {
              "type": "integer",
              "description": "Id of a check a payment will be applied to"
            },
            "amount": {
              "type": "number",
              "description": "Amount which is applied with the payment\nIf amount is not specified or 0, POS will automatically calculate correct price based on tender type",
              "format": "double",
              "nullable": true
            },
            "tip": {
              "type": "number",
              "description": "Tip which is applied with the payment",
              "format": "double",
              "nullable": true
            },
            "paymentSessionId": {
              "type": "string",
              "description": "Payment session id for external payments"
            }
          }
        },
        "NcpPaymentAuthorizationRequestData": {
          "allOf": [
            {
              "$ref": "#/components/schemas/PaymentAuthorizationRequestData"
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "checkId": {
                  "type": "integer"
                }
              }
            }
          ]
        },
        "PaymentAuthorizationRequestData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "authorizationResult": {
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PaymentAuthResult"
                }
              ]
            },
            "authorizationCode": {
              "type": "string",
              "nullable": true
            },
            "errorMessage": {
              "type": "string",
              "nullable": true
            },
            "referenceId": {
              "type": "string",
              "nullable": true
            },
            "authorizedAmount": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "authorizedTip": {
              "type": "number",
              "format": "double",
              "nullable": true
            },
            "customerReceiptLines": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "merchantReceiptLines": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "maskedCardNumber": {
              "type": "string",
              "nullable": true
            }
          }
        },
        "PaymentAuthResult": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "None",
            "Approved",
            "Declined",
            "Failed"
          ],
          "enum": [
            "None",
            "Approved",
            "Declined",
            "Failed"
          ]
        },
        "PrintReceiptRequest": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "tableId",
            "checkId"
          ],
          "properties": {
            "tableId": {
              "type": "integer"
            },
            "checkId": {
              "type": "integer"
            },
            "printerId": {
              "type": "integer",
              "nullable": true
            }
          }
        },
        "SmsReceiptRequest": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "tableId",
            "checkId",
            "customerPhoneNumber"
          ],
          "properties": {
            "tableId": {
              "type": "integer"
            },
            "checkId": {
              "type": "integer"
            },
            "customerPhoneNumber": {
              "type": "string",
              "format": "phone",
              "minLength": 1
            }
          }
        },
        "EmailReceiptRequest": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "tableId",
            "checkId",
            "customerEmail"
          ],
          "properties": {
            "tableId": {
              "type": "integer"
            },
            "checkId": {
              "type": "integer"
            },
            "customerEmail": {
              "type": "string",
              "format": "email",
              "minLength": 1
            }
          }
        },
        "ErrorResponseData": {
          "type": "object",
          "description": "Represents details of operation failure.",
          "additionalProperties": false,
          "properties": {
            "details": {
              "type": "array",
              "description": "List of string values that may further help with troubleshooting.\nMay contain details about nested errors, POS API failure types, parameter values etc.",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "errorType": {
              "type": "string",
              "description": "Internal error type that can help categorize or pinpoint the problem in External API.",
              "nullable": true
            },
            "message": {
              "type": "string",
              "description": "Failure description that should help API consumer troubleshoot the problem.",
              "nullable": true
            },
            "statusCode": {
              "description": "HTTP status code of the response.",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HttpStatusCode"
                }
              ]
            }
          }
        },
        "HttpStatusCode": {
          "type": "integer",
          "description": "",
          "x-enumNames": [
            "Continue",
            "SwitchingProtocols",
            "Processing",
            "EarlyHints",
            "OK",
            "Created",
            "Accepted",
            "NonAuthoritativeInformation",
            "NoContent",
            "ResetContent",
            "PartialContent",
            "MultiStatus",
            "AlreadyReported",
            "IMUsed",
            "MultipleChoices",
            "Ambiguous",
            "MovedPermanently",
            "Moved",
            "Found",
            "Redirect",
            "SeeOther",
            "RedirectMethod",
            "NotModified",
            "UseProxy",
            "Unused",
            "TemporaryRedirect",
            "RedirectKeepVerb",
            "PermanentRedirect",
            "BadRequest",
            "Unauthorized",
            "PaymentRequired",
            "Forbidden",
            "NotFound",
            "MethodNotAllowed",
            "NotAcceptable",
            "ProxyAuthenticationRequired",
            "RequestTimeout",
            "Conflict",
            "Gone",
            "LengthRequired",
            "PreconditionFailed",
            "RequestEntityTooLarge",
            "RequestUriTooLong",
            "UnsupportedMediaType",
            "RequestedRangeNotSatisfiable",
            "ExpectationFailed",
            "MisdirectedRequest",
            "UnprocessableEntity",
            "Locked",
            "FailedDependency",
            "UpgradeRequired",
            "PreconditionRequired",
            "TooManyRequests",
            "RequestHeaderFieldsTooLarge",
            "UnavailableForLegalReasons",
            "InternalServerError",
            "NotImplemented",
            "BadGateway",
            "ServiceUnavailable",
            "GatewayTimeout",
            "HttpVersionNotSupported",
            "VariantAlsoNegotiates",
            "InsufficientStorage",
            "LoopDetected",
            "NotExtended",
            "NetworkAuthenticationRequired"
          ],
          "enum": [
            100,
            101,
            102,
            103,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            226,
            300,
            300,
            301,
            301,
            302,
            302,
            303,
            303,
            304,
            305,
            306,
            307,
            307,
            308,
            400,
            401,
            402,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            421,
            422,
            423,
            424,
            426,
            428,
            429,
            431,
            451,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            507,
            508,
            510,
            511
          ]
        },
        "CheckCreateData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "tableId"
          ],
          "properties": {
            "tableId": {
              "type": "integer"
            }
          }
        },
        "CheckItemCreateData": {
          "type": "object",
          "description": "Item to be added to a check.",
          "additionalProperties": false,
          "required": [
            "salesItemId"
          ],
          "properties": {
            "salesItemId": {
              "type": "integer",
              "description": "ID of the sales item to be added."
            },
            "menuId": {
              "type": "integer",
              "description": "If set, specifies the menu from the item should be taken and\nwhich determines item's price if parameter 'price' not set.",
              "nullable": true
            },
            "subMenuId": {
              "type": "integer",
              "description": "If set, specifies the submenu from the item should be taken and\nwhich determines item's price if parameter 'price' not set.",
              "nullable": true
            },
            "description": {
              "type": "string",
              "description": "If set, overrides configuration and specifies item description.\nOtherwise the item description will be obtained from configuration.",
              "nullable": true
            },
            "price": {
              "type": "number",
              "description": "If set, overrides configuration and specifies item price.\nOtherwise the item price will be obtained from configuration.",
              "format": "decimal",
              "nullable": true
            },
            "seatNumber": {
              "type": "integer",
              "description": "If it is table service, pivot seating is on and the seat parameter is set, the new entry will be appended below all the preexisting entries on the specified seat. If Quick service or pivot seating is off, the seat will always be the table seat.",
              "format": "int32",
              "nullable": true
            },
            "quantity": {
              "description": "Data to add quantity for added check item.",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ItemQuantityData"
                }
              ]
            }
          }
        },
        "ItemQuantityData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "units": {
              "type": "number",
              "description": "The quantity value to apply.",
              "format": "double"
            },
            "isWeight": {
              "type": "boolean",
              "description": "Are the units the weight of the item?"
            }
          }
        },
        "CheckItemsDeleteData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "checkItemsToDelete"
          ],
          "properties": {
            "checkItemsToDelete": {
              "type": "array",
              "description": "List of items IDs to be deleted from the check.\nOrdered items are voided, unordered are removed.",
              "items": {
                "type": "integer"
              }
            },
            "voidReasonId": {
              "type": "integer",
              "description": "ID of the void reason for the deletion.\nNeeds to be specified for item voids, ignored for clears.",
              "nullable": true
            },
            "authorizingManager": {
              "description": "Authorizing manager, required only when the employee doesn't have enough right to void",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              ]
            }
          }
        },
        "PrintChecksRequestData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "checkIds"
          ],
          "properties": {
            "checkIds": {
              "type": "array",
              "description": "Id of checks which will be printed.",
              "items": {
                "type": "integer"
              }
            },
            "printerId": {
              "type": "integer",
              "description": "Used printer Id. If not presented or is 0, then the default printer will be used.",
              "nullable": true
            }
          }
        },
        "PaymentRequestData": {
          "type": "object",
          "description": "PaymentRequestData represents payment request",
          "additionalProperties": false,
          "required": [
            "tenderId"
          ],
          "properties": {
            "tenderId": {
              "type": "integer",
              "description": "Id of a tender which is used for the payment\nIf tender id is not specified default tender id will be used, which is configured in appsettings.json"
            },
            "amount": {
              "type": "number",
              "description": "Amount which is applied with the payment\nIf amount is not specified or 0, POS will automatically calculate correct price based on tender type",
              "format": "double",
              "nullable": true
            },
            "tip": {
              "type": "number",
              "description": "Tip which is applied with the payment",
              "format": "double",
              "nullable": true
            },
            "paymentSessionId": {
              "type": "string",
              "description": "Payment session id for external payments"
            }
          }
        },
        "TenderDefaultAmountData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "defaultAmount": {
              "type": "number",
              "format": "decimal"
            }
          }
        },
        "DeviceData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "employeeSessionTimeoutMilliseconds": {
              "type": "integer",
              "description": "Employee log-in token lifetime in milliseconds",
              "format": "int32"
            },
            "customName": {
              "type": "string",
              "description": "Device custom name.",
              "nullable": true
            },
            "deviceType": {
              "type": "string",
              "description": "Device type.",
              "nullable": true
            },
            "defaultPrinter": {
              "type": "integer",
              "description": "Default receipt printer for this device.",
              "nullable": true
            },
            "functionalModes": {
              "type": "array",
              "description": "Specifies the functional modes to run in.",
              "items": {
                "$ref": "#/components/schemas/DeviceFunctionalMode"
              }
            },
            "checkPresenterConfiguration": {
              "description": "Contains check presenter configuration if check presenter functional mode is set.",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CheckPresenterConfigurationData"
                }
              ]
            },
            "platformCredentials": {
              "description": "Information and credentials necessary for communication with Business Services Platform\nand all other ISIP endpoints.",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PlatformCredentialsData"
                }
              ]
            },
            "companyLogoData": {
              "type": "string",
              "description": "Company logo to be shown on the device login screen. Encoded as HTML image tag Data URL string\nfor easy consumption from the One Aloha UI app or other HTML-based GUI client.\nE.g. \"data:image/bmp;base64,&lt;image data&gt;\"\nSee https://html.com/attributes/img-src/#Data_URIs for details.",
              "nullable": true
            },
            "connectedPaymentsCommonClientConfiguration": {
              "description": "Configuration for Connected Payments Common Client used by One Aloha UI app for payment integrations.",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ConnectedPaymentsCommonClientConfigurationData"
                }
              ]
            }
          }
        },
        "DeviceFunctionalMode": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "CHECK_PRESENTER",
            "ORDERING"
          ],
          "enum": [
            "CHECK_PRESENTER",
            "ORDERING"
          ]
        },
        "CheckPresenterConfigurationData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "printAlways": {
              "type": "boolean",
              "nullable": true
            },
            "showTipScreen": {
              "type": "boolean",
              "nullable": true
            },
            "showReceiptPrint": {
              "type": "boolean",
              "nullable": true
            },
            "showReceiptEmail": {
              "type": "boolean",
              "nullable": true
            },
            "showReceiptSMS": {
              "type": "boolean",
              "nullable": true
            },
            "showSignatureScreen": {
              "type": "boolean",
              "nullable": true
            },
            "signatureBoxText": {
              "type": "string",
              "nullable": true
            },
            "tipLow": {
              "type": "string",
              "nullable": true
            },
            "tipMedium": {
              "type": "string",
              "nullable": true
            },
            "tipHigh": {
              "type": "string",
              "nullable": true
            },
            "tipLimitPercent": {
              "type": "string",
              "nullable": true
            },
            "logLevel": {
              "type": "string",
              "nullable": true
            },
            "enableCustomerInfo": {
              "type": "boolean",
              "nullable": true
            },
            "customerInfoTitle": {
              "type": "string",
              "nullable": true
            },
            "customerInfoText": {
              "type": "string",
              "nullable": true
            }
          }
        },
        "PlatformCredentialsData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "gatewayBaseUrl": {
              "type": "string",
              "description": "Base address of the Business Services Platform's API gateway\nin the configured environment.\nE.g. \"https://gateway.ncrplatform.com/\""
            },
            "organization": {
              "type": "string",
              "description": "Short name or ID (can be used interchangeably) of the organization\nthe site belongs to."
            },
            "enterpriseUnit": {
              "type": "string",
              "description": "Enterprise unit of the site."
            },
            "applicationKey": {
              "type": "string",
              "description": "Application key of the 1AUI app in the configured environment."
            },
            "technicalUserSharedKey": {
              "type": "string",
              "description": "Shared key of the technical user used for authentication and authorization\nof cloud and ISIP communication.\nUsed for HMAC auth schema as used by Business Services Platform."
            },
            "technicalUserSecretKey": {
              "type": "string",
              "description": "Secret key of the technical user used for authentication and authorization\nof cloud and ISIP communication.\nUsed for HMAC auth schema as used by Business Services Platform."
            }
          }
        },
        "ConnectedPaymentsCommonClientConfigurationData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "companyNumber": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "configAddress": {
              "type": "string",
              "nullable": true
            },
            "configPort": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "storeNumber": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "laneNumber": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "clientKey": {
              "type": "string",
              "nullable": true
            },
            "secretKey": {
              "type": "string",
              "nullable": true
            },
            "hostAddress": {
              "type": "string",
              "nullable": true
            },
            "hostAddressSecondary": {
              "type": "string",
              "nullable": true
            },
            "hostPort": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "hostPortSecondary": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        },
        "LogEntryData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "logRecords"
          ],
          "properties": {
            "logRecords": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ClockInRequestData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "jobCodeId"
          ],
          "properties": {
            "jobCodeId": {
              "type": "integer",
              "description": "Id of the job code user is clocking in"
            },
            "authorizingManager": {
              "description": "Authorizing manager, required only when the employee doesn't have enough right to clock into the [JobCodeId]",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              ]
            }
          }
        },
        "ClockOutRequestData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "declaredTips"
          ],
          "properties": {
            "declaredTips": {
              "type": "number",
              "format": "double"
            },
            "authorizingManager": {
              "description": "Authorizing manager, required only when the employee doesn't have enough right to clock out",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              ]
            }
          }
        },
        "DeleteClockOutRequestData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "employeeId": {
              "type": "string",
              "description": "Id of employee to delete clock out for."
            },
            "authorizingManager": {
              "description": "Authorizing manager, required only when the employee doesn't have enough right to delete clock out.",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              ]
            }
          }
        },
        "BreakInRequestData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "authorizingManager": {
              "description": "Authorizing manager, required only when the employee doesn't have enough right to break in",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              ]
            }
          }
        },
        "BreakOutRequestData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "authorizingManager": {
              "description": "Authorizing manager, required only when the employee doesn't have enough right to break out",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EmployeeCredentialsData"
                }
              ]
            }
          }
        },
        "ClockInMessageData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of the message"
            },
            "messageLines": {
              "type": "array",
              "description": "Message split into separate lines",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "PendingClockInMessagesRequestData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "jobCodeId"
          ],
          "properties": {
            "jobCodeId": {
              "type": "integer",
              "description": "JobCode of logged-in employee"
            }
          }
        },
        "AcknowledgeClockInRequestData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "punchAcknowledgement": {
              "description": "Acceptance result to apply to acknowledge message",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PunchAcknowledgementRequestData"
                }
              ]
            }
          }
        },
        "PunchAcknowledgementRequestData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "acknowledgmentGuid",
            "responseTime",
            "acceptanceResponse",
            "jobCodeId"
          ],
          "properties": {
            "acknowledgmentGuid": {
              "type": "string",
              "description": "Id of acknowledgment",
              "minLength": 1
            },
            "responseTime": {
              "type": "string",
              "description": "Time when the employee has responded to the ClockIn message,in ISO 8601 format including timezone, eg. 2019-08-05T12:56:26+02:00",
              "minLength": 1
            },
            "acceptanceResponse": {
              "type": "boolean",
              "description": "Acceptance result"
            },
            "approvingManager": {
              "type": "integer",
              "description": "Approving manager if necessary",
              "nullable": true
            },
            "jobCodeId": {
              "type": "integer",
              "description": "JobCode of currently logged in employee"
            }
          }
        },
        "ConfigurationData": {
          "type": "object",
          "description": "Employee configuration data.",
          "additionalProperties": false,
          "properties": {
            "pivotSeatingEnabled": {
              "type": "boolean",
              "description": "True if the employee is allowed to work with pivot seating. Otherwise false."
            },
            "pivotSeatingAutoIncrementCategory": {
              "type": "integer",
              "description": "If value &gt; 0, id of sales item category for auto increment pivot seating. If null, the feature is disabled.",
              "nullable": true
            },
            "canLookupSalesItems": {
              "type": "boolean",
              "description": "True if the employee is allowed to look up sales items.",
              "nullable": true
            },
            "canAddCheckItemsUsingLookup": {
              "type": "boolean",
              "description": "True if the employee is allowed to add check items from the sales item lookup.",
              "nullable": true
            },
            "categoryForSalesItemLookup": {
              "type": "integer",
              "description": "If specified, only sales items from the referenced category should be visible in the lookup.",
              "nullable": true
            },
            "mustPromptForOrderMode": {
              "type": "boolean",
              "description": "True, if the employee have to prompt for order mode. Otherwise false."
            },
            "restrictedOrderModeIds": {
              "type": "array",
              "description": "The List of order mode ids eligible for this employee.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "MenuData": {
          "type": "object",
          "description": "Collection of multiple SubMenu. They are typically created \nfor a different times of the day, such as breakfast, lunch, and \ndinner, or for different job positions, such as bartender and server.",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "A unique identifier of menu.",
              "nullable": true
            },
            "shortName": {
              "type": "string",
              "description": "Record display name that should be displayed to the end user.",
              "nullable": true
            },
            "longName": {
              "type": "string",
              "description": "Menu description.",
              "nullable": true
            },
            "activeModifierCodes": {
              "type": "array",
              "description": "Active modifier codes",
              "items": {
                "$ref": "#/components/schemas/ModifierCodeData"
              }
            },
            "subMenus": {
              "type": "array",
              "description": "Collection of root sub menus.",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/SubmenuData"
              }
            }
          },
          "example": {
            "exampleMenuData": {
              "$ref": "examples/example-menu-200113.yaml"
            }
          }
        },
        "ModifierCodeData": {
          "type": "object",
          "description": "Modifier codes allow to communicate more information about a modifier to the kitchen staff",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of modifier code"
            },
            "displayName": {
              "type": "string",
              "description": "Display name of modifier code.",
              "nullable": true
            },
            "indicator": {
              "type": "string",
              "description": "Indicator of modifier code.",
              "nullable": true
            }
          }
        },
        "SubmenuData": {
          "type": "object",
          "description": "Logical groupings based on the menu of a restaurant.",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of subMenu"
            },
            "shortName": {
              "type": "string",
              "description": "Display name that should be displayed to the end user.",
              "nullable": true
            },
            "longName": {
              "type": "string",
              "description": "Submenu description",
              "nullable": true
            },
            "imageUrl": {
              "type": "string",
              "description": "Submenu button image URL address\n!!!NOT IMPLEMENTED!!!",
              "nullable": true
            },
            "modifierGroupId": {
              "type": "integer",
              "description": "Ref to exception(submenu level) modifier group that is applied to all sales items in a submenu.",
              "nullable": true
            },
            "positionNumber": {
              "type": "integer",
              "description": "Position on the list of submenus.",
              "nullable": true
            },
            "childSubmenus": {
              "type": "array",
              "description": "Collection of child Submenus.",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/SubmenuData"
              }
            },
            "menuItems": {
              "type": "array",
              "description": "Collection of menu items used in Submenu.",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/MenuItemData"
              }
            }
          }
        },
        "MenuItemData": {
          "type": "object",
          "description": "Menu item represents sales item in Menu and contains a link to sales item.",
          "additionalProperties": false,
          "properties": {
            "price": {
              "type": "number",
              "description": "Base price, can be different from the actual \"effective\" price.",
              "format": "double",
              "nullable": true
            },
            "salesItemId": {
              "type": "integer",
              "description": "Ref to default sales item.",
              "nullable": true
            },
            "positionNumber": {
              "type": "integer",
              "description": "Position on the grid of submenu menu items. \nGrid positioning starts from top to bottom, then next columns, then next page.",
              "nullable": true
            }
          }
        },
        "SalesItemData": {
          "type": "object",
          "description": "Sales items are used to make a real order.Retail items, modifier items \nthat are the building blocks for menu item.",
          "additionalProperties": false,
          "properties": {
            "salesItemModifierGroups": {
              "type": "array",
              "description": "Modifier groups that can modify this item.",
              "items": {
                "$ref": "#/components/schemas/SalesItemModifierGroupData"
              }
            },
            "salesItemCategoryIds": {
              "type": "array",
              "description": "Categories that this sales item belongs to.",
              "items": {
                "type": "integer"
              }
            },
            "id": {
              "type": "integer",
              "description": "Id of sales item"
            },
            "shortName": {
              "type": "string",
              "description": "Display name that should be displayed to the end user.",
              "nullable": true
            },
            "longName": {
              "type": "string",
              "description": "Sales item description",
              "nullable": true
            },
            "price": {
              "type": "number",
              "description": "Base price, can be different from the actual \"effective\" price.",
              "format": "double",
              "nullable": true
            },
            "imageUrl": {
              "type": "string",
              "description": "Menu item button image URL address\n!!!NOT IMPLEMENTED!!!",
              "nullable": true
            },
            "consolidateFirstModifierGroup": {
              "type": "boolean",
              "description": "To print and consolidate modifiers based on the first modifier group of the item.\nThis option is available for the Standard item type only."
            },
            "quantityPrice": {
              "description": "Quantity Price enables to price an item by quantity or weight",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/QuantityPriceData"
                }
              ]
            },
            "combinePriceWithRoot": {
              "type": "boolean",
              "description": "If True, the price of the modifier should be included in root sales item. Otherwise false."
            },
            "shouldAskForDescription": {
              "type": "boolean",
              "description": "Enable editable/adjustable description",
              "nullable": false
            },
            "shouldAskForPrice": {
              "type": "boolean",
              "description": "Enable editable/adjustable price",
              "nullable": false
            }
          },
          "example": {
            "exampleSalesItems": {
              "$ref": "examples/example-sales-items-200113.yaml"
            }
          }
        },
        "SalesItemModifierGroupData": {
          "type": "object",
          "description": "Represents modifier group for sales item and contains a link to modifier group.",
          "additionalProperties": false,
          "properties": {
            "includedItems": {
              "type": "array",
              "description": "Collection of included items on current modifier group.",
              "items": {
                "$ref": "#/components/schemas/IncludedModifierGroupItemData"
              }
            },
            "modifierGroupId": {
              "type": "integer",
              "description": "Ref to modifier group."
            },
            "positionNumber": {
              "type": "integer",
              "description": "Position on the list of modifier groups.",
              "nullable": true
            }
          }
        },
        "IncludedModifierGroupItemData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "salesItemId": {
              "type": "integer",
              "description": "Ref to modifier (sales) item."
            },
            "positionNumber": {
              "type": "integer",
              "description": "Position on the list of included modifiers.",
              "nullable": true
            },
            "isImplied": {
              "type": "boolean",
              "description": "Is automatically included with item (for entry/check included modifiers)"
            }
          }
        },
        "QuantityPriceData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer"
            },
            "itemId": {
              "type": "integer"
            },
            "tareId": {
              "type": "integer"
            },
            "unitName": {
              "type": "string"
            },
            "unitPrecision": {
              "type": "integer",
              "format": "int32"
            },
            "pricePerUnit": {
              "type": "number",
              "format": "double"
            },
            "storeAccess": {
              "type": "integer"
            },
            "parentAccess": {
              "type": "integer"
            },
            "affectsInventory": {
              "type": "boolean"
            },
            "shouldApplyQuantityToModifiers": {
              "type": "boolean"
            }
          }
        },
        "ModifierGroupData": {
          "type": "object",
          "description": "Modifiers are groups of items used to extend, alter, or further define menu items. \nModifier groups have a circular relationship to items in that they are composed of items \ndefined in the Items file, grouped into a modifier group, and then assigned to an item.",
          "additionalProperties": false,
          "properties": {
            "modifierGroupItems": {
              "type": "array",
              "description": "Modifier group (sales)items.",
              "items": {
                "$ref": "#/components/schemas/ModifierGroupItemData"
              }
            },
            "id": {
              "type": "integer",
              "description": "Id of modifier group.\nNote: Modifier group Ids range from 10000 to 19999, \nwhereas Exception(Submenu level) modifier group Ids range from 20000 to 29999."
            },
            "shortName": {
              "type": "string",
              "description": "Abbreviated name for the modifier group.",
              "nullable": true
            },
            "longName": {
              "type": "string",
              "description": "Formal, more descriptive name of the item.",
              "nullable": true
            },
            "minItemsCount": {
              "type": "integer",
              "description": "Specifies the minimum number of modifiers that you can select when a customer orders an item.",
              "nullable": true
            },
            "maxItemsCount": {
              "type": "integer",
              "description": "Specifies the maximum number of modifiers that you can select when \na customer orders an item. If both \"Minimum\" and \"Maximum\" are 0 (zero), \nthe Aloha POS system assumes an unlimited number.",
              "nullable": true
            },
            "freeItemsCount": {
              "type": "integer",
              "description": "Specifies the number of items from the modifier group the customer can order at no charge.",
              "nullable": true
            },
            "substitutionGroupId": {
              "type": "integer",
              "description": "Ref to modifier group that contains items you can substitute for \nthe items listed in the current modifier group.",
              "nullable": true
            },
            "isFlowRequired": {
              "type": "boolean",
              "description": "Forces the order entry terminal to automatically open the Modifier Group screen.",
              "nullable": true
            },
            "isRefill": {
              "type": "boolean",
              "description": "Enables the modifier group to allow refills of the menu item.",
              "nullable": true
            },
            "refillIndicator": {
              "type": "string",
              "description": "Shows up to three alphanumeric characters on the kitchen chit to indicate the item is a refill, such as REF.",
              "nullable": true
            },
            "maxRefillsCount": {
              "type": "integer",
              "description": "Indicates the maximum number of times, from 1 to 99, you can modify \nthe menu item and order a refill before the manager approval screen appears.",
              "nullable": true
            },
            "type": {
              "description": "Type of Modifier Group:\n1. Standard represents a grouping of standard items from which a guest can choose to modify a menu item.\n2. Build represents a grouping of the item types you designate as build items, \n   from which a guest can choose to modify a menu item.",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ModifierGroupType"
                }
              ]
            },
            "hideSpecialMessageButton": {
              "type": "boolean",
              "description": "Hides the button to prevent access to the Enter Special Message screen \nand reduce unnecessary communication to the kitchen staff.",
              "nullable": true
            },
            "showRequiredModifierCountdown": {
              "type": "boolean",
              "description": "Controls display of \"Required Modifier Count\" text on modifier group button. Only For TS.",
              "nullable": true
            },
            "hideModifierPrice": {
              "type": "boolean",
              "description": "Controls if Modifier button will show price or not. Only For TS.",
              "nullable": true
            },
            "suppressModifierScreen": {
              "type": "boolean",
              "description": "Prevents the system from showing the hard-coded classic modifier screen when \nthe modifier group has one or more minimum required modifiers, as defined in \"Minimum\".",
              "nullable": true
            },
            "bindingLevel": {
              "description": "Binding level in menu:\n1. SALES_ITEM - modifier group is tied with a sales item.\n2. SUBMENU - exception(submenu level) modifier group is more general and is applied to all sales items in a submenu.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ModifierGroupBindingLevel"
                }
              ]
            }
          },
          "example": {
            "exampleModifierGroups": {
              "$ref": "examples/example-modifier-groups-200113.yaml"
            }
          }
        },
        "ModifierGroupItemData": {
          "type": "object",
          "description": "Modifier group item that belong to some modifier group \nand contains a reference to sales item. ",
          "additionalProperties": false,
          "properties": {
            "salesItemId": {
              "type": "integer",
              "description": "Ref to sales item"
            },
            "price": {
              "type": "number",
              "description": "Default price of modifier group item. Applies when price method is \"Normal\"",
              "format": "double"
            },
            "weight": {
              "type": "integer",
              "description": "Weight of the modifier item.",
              "format": "int32",
              "nullable": true
            },
            "notEligibleForSubstitution": {
              "type": "boolean",
              "description": "Specifies current modifier item cannot be substituted for an included modifier.",
              "nullable": true
            },
            "positionNumber": {
              "type": "integer",
              "description": "Position on the list of modifier group items.",
              "nullable": true
            }
          }
        },
        "ModifierGroupType": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "STANDARD",
            "BUILD"
          ],
          "enum": [
            "STANDARD",
            "BUILD"
          ]
        },
        "ModifierGroupBindingLevel": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "SALES_ITEM",
            "SUBMENU"
          ],
          "enum": [
            "SALES_ITEM",
            "SUBMENU"
          ]
        },
        "OrderModeViewData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Order mode ID."
            },
            "name": {
              "type": "string",
              "description": "Order mode name."
            },
            "indicator": {
              "type": "string",
              "description": "Order mode Indicator"
            },
            "active": {
              "type": "boolean",
              "description": "True if order mode is active. Otherwise false."
            }
          }
        },
        "TableViewData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Table Id.",
              "nullable": true
            },
            "tableDefinitionId": {
              "type": "integer",
              "description": "Associated TableDefinition id, 0 for TABS (Type == TAB).",
              "nullable": true
            },
            "name": {
              "type": "string",
              "description": "Name of the table.",
              "nullable": true
            },
            "guestCount": {
              "type": "integer",
              "description": "Guest count.",
              "nullable": true
            },
            "isLocked": {
              "type": "boolean",
              "description": "True if the table is locked. Otherwise false.",
              "nullable": true
            },
            "isClosed": {
              "type": "boolean",
              "description": "True if the table is closed. Otherwise false.",
              "nullable": true
            },
            "owningEmployeeId": {
              "type": "integer",
              "description": "Employee who owns the table. In table service, no value is set for delivery tables.",
              "nullable": true
            },
            "checkIds": {
              "type": "array",
              "description": "Ids of the checks (both open and closed) on the table.",
              "nullable": true,
              "items": {
                "type": "integer"
              }
            },
            "type": {
              "description": "Type of the table.",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TableType2"
                }
              ]
            },
            "seats": {
              "type": "array",
              "description": "List of the seats assigned to the table.",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/SeatViewData"
              }
            }
          }
        },
        "TableType2": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "UNDEFINED",
            "TAB",
            "SEAT",
            "TABLE",
            "CHECK",
            "ORDER",
            "REOPENED_CHECK",
            "TEMPORARY",
            "TRANSFER_SEAT",
            "TRANSFER_CHECK"
          ],
          "enum": [
            "UNDEFINED",
            "TAB",
            "SEAT",
            "TABLE",
            "CHECK",
            "ORDER",
            "REOPENED_CHECK",
            "TEMPORARY",
            "TRANSFER_SEAT",
            "TRANSFER_CHECK"
          ]
        },
        "SeatViewData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "number": {
              "type": "integer",
              "description": "Seat number.",
              "format": "int32"
            }
          }
        },
        "TableCreateData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "tableDefinitionId": {
              "type": "integer",
              "description": "Table service only parameter. Id of the table definition used for the new table. If zero, no table definition will be used and table Type will be TAB.",
              "nullable": true
            },
            "tableName": {
              "type": "string",
              "description": "New table name. If not set and table definition is found, it will be named either after the definition's id or lookup name.",
              "maxLength": 15,
              "nullable": true
            },
            "guestCount": {
              "type": "integer",
              "description": "Number of guests that are at the new table.",
              "format": "int32",
              "nullable": true
            },
            "isLocked": {
              "type": "boolean",
              "description": "Set true to lock new table after adding.",
              "nullable": true
            }
          }
        },
        "TableRenameData": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "newTableName"
          ],
          "properties": {
            "newTableName": {
              "type": "string",
              "description": "New table name",
              "maxLength": 15,
              "minLength": 1
            }
          }
        },
        "TableOrderData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "orderModeId": {
              "type": "integer",
              "description": "ID of the order mode to be used during ordering. When not set,\nfirst active order mode (that is not refund) will be used.",
              "nullable": true
            },
            "checkItemsToOrder": {
              "type": "array",
              "description": "List of IDs of check items to be ordered.\nWhen empty, selection based order will be applied automatically.",
              "nullable": true,
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "TableDefinitionViewData": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "nullable": true
            },
            "isUsed": {
              "type": "boolean",
              "nullable": true
            },
            "description": {
              "type": "string",
              "nullable": true
            },
            "lookupName": {
              "type": "string",
              "nullable": true
            },
            "numberOfSeats": {
              "type": "integer",
              "nullable": true
            }
          }
        },
        "TenderDefinitionData": {
          "type": "object",
          "description": "TenderDefinitionData represents tender definition in Aloha",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique identification of tender in Aloha POS"
            },
            "name": {
              "type": "string",
              "description": "Text description of the tender"
            },
            "imageUrl": {
              "type": "string",
              "description": "Tender button image URL address",
              "nullable": true
            },
            "positionNumber": {
              "type": "integer",
              "description": "Position on the grid of tender screen. \nGrid positioning starts from top to bottom, then next columns, then next page.",
              "nullable": true
            },
            "firstAvailableButtonPosition": {
              "type": "boolean",
              "description": "Indicates whether button should take first available position on the tender screen.\nIf FirstAvailableButtonPosition is false and PositionNumber is not specified tender won't be visible at all."
            },
            "type": {
              "description": "Tender type, for example Cash, Credit, ..",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TenderType"
                }
              ]
            },
            "askForAmount": {
              "type": "boolean",
              "description": "Indicates whether client should provide amount when applying this tender"
            },
            "askForTip": {
              "type": "boolean",
              "description": "Indicates whether client should provide tip when applying this tender"
            }
          }
        },
        "TenderType": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "None",
            "Cash",
            "CreditCard"
          ],
          "enum": [
            "None",
            "Cash",
            "CreditCard"
          ]
        },
        "VoidReasonCodeViewData": {
          "type": "object",
          "description": "Pre-configured reasons for voiding or refunding",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of the Void Reason Code"
            },
            "name": {
              "type": "string",
              "description": "Name of the Void Reason Code"
            },
            "isHiddenOnFoh": {
              "type": "boolean",
              "description": "Defines if the Void Reason Code is visible on UI (and users are able to use this Void Reason Code)."
            }
          }
        },
        "RepeatEntries": {
          "type": "object",
          "description": "repeats a set of entries in the check specified by their ids in entry ids as many times as specified by count parameter",
          "additionalProperties": false,
          "required": [
            "checkId",
            "entryIds",
            "count",
            "isUnorderedItemIncluded"
          ],
          "properties": {
            "checkId": {
              "type": "integer",
              "description": "Id of the check where we want to repeat item(s)",
              "nullable": false
            },
            "entryIds": {
              "type": "array",
              "description": "List of item(s) on check for repeat",
              "items": {
                "type": "integer"
              },
              "nullable": false
            },
            "count": {
              "type": "integer",
              "description": "Specifies how many times will be items added to the check.",
              "nullable": false
            },
            "isUnorderedItemIncluded": {
              "type": "boolean",
              "description": "Asistant parameter for count. If it is true for ordered items and unordered items is used different calculation method. =true, number of repeats = count-1 Example A (original entry, ordered) B (original entry, unordered) A1 (same Item as A, unordered) B1 (same Item as B, unordered) A2 (same Item as A, unordered) =false, number of repeats = count A (original entry, ordered) B (original entry, unordered) A1 (same Item as A, unordered) B1 (same Item as B, unordered) A2 (same Item as A, unordered) B2 (same Item as B, unordered)",
              "nullable": false
            }
          }
        }
      }
    },
    "externalDocs": {
      "description": "NCR Aloha POS API documentation",
      "url": "#"
    }
  }
